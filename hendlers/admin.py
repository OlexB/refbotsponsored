from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_refbot import dp, bot
from database import sqlite_db as sq
from config import ADMIN_ID
from markups import admin_mkr
import datetime
from datetime import timedelta

class FSMAdmin(StatesGroup):
    admin = State()
    search_id = State()
    search_id_next = State()
    edit_price = State()
    ed_default_price_ref = State()
    ed_premium_price_ref = State()
    ed_premium_ak_price = State()
    minimum_default_out = State()
    minimum_prem_out = State()
    days_3_price = State()
    days_6_price = State()
    days_10_price = State()
    chanel_name = State()
    channel_id = State()
    channel_url = State()
    date_channel = State()
    send = State()

# ============================================ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é =============================================================

async def btn_admin(message: types.Message, state: FSMContext): 
    if message.chat.type == 'private':
# –ö–Ω–æ–ø–∫–∞ "–ü–û–®–£–ö –ü–û ID"
        if message.text == '–ü–æ—à—É–∫ –ø–æ ID üîë':
            await message.answer(f"–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", reply_markup=types.ReplyKeyboardRemove())
            await FSMAdmin.search_id.set()
        elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω–∏¬†üíµ':
            await message.answer(f"–Ø–∫—É —Ü—ñ–Ω—É –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=admin_mkr.EditPrice)
        elif message.text == '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤¬†üìä':
            await message.answer(f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {await sq.count_users()}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ PREMIUM: {await sq.count_users()-await sq.count_users_prem()}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ PREMIUM: {await sq.count_users_prem()}")
        elif message.text == '–û–Ω–æ–≤–∏—Ç–∏ –ë–î üîÑ':
            pass
        elif message.text == '–ú–µ–Ω—é¬†‚¨ÖÔ∏è':
            await message.answer(f'–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_mkr.AdminMenu)
        elif message.text == '–î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ üë§':
            await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å –∫–Ω–æ–ø–∫–∏", reply_markup=admin_mkr.spon)
            await FSMAdmin.chanel_name.set()

# ============================================ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ "–ó–ú–Ü–ù–ò–¢–ò –¶–Ü–ù–ò" ===================================================
# –ö–Ω–æ–ø–∫–∞ "–¶–Ü–ù–ê –ó–ê–†–ï–§–ê"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ –∑–∞ —Ä–µ—Ñ–∞':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—è —Ü—ñ–Ω–∞: {await sq.default_price_ref()} –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.ed_default_price_ref.set()
# –ö–Ω–æ–ø–∫–∞ "PREMIUM –∑–∞ —Ä–µ—Ñ–∞"
        elif message.text == 'üìå¬†PREMIUM –∑–∞ —Ä–µ—Ñ–∞':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—è —Ü—ñ–Ω–∞: {await sq.premium_price_ref()} –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.ed_premium_price_ref.set()
# –ö–Ω–æ–ø–∫–∞ "–¶–Ü–ù–ê –°–ü–û–ù–°–û–†–ö–ò"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∫–∏':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—è —Ü—ñ–Ω–∞:\n–ù–∞ 3 –¥–Ω—ñ: {await sq.sp_3days_price()} –≥—Ä–Ω\n–ù–∞ 6 –¥–Ω—ñ–≤: {await sq.sp_6days_price()} –≥—Ä–Ω\n–ù–∞ 10 –¥–Ω—ñ–≤: {await sq.sp_10days_price()}")
            await message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—É —Ü—ñ–Ω—É –∑–º—ñ–Ω–∏—Ç–∏", reply_markup=admin_mkr.Sponsor_day)
# –ö–Ω–æ–ø–∫–∞ "–¶–Ü–ù–ê PREMIUM"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ PREMIUM':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—è —Ü—ñ–Ω–∞: {await sq.premium_ak_price()} –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.ed_premium_ak_price.set()
# –ö–Ω–æ–ø–∫–∞ "–ó–í–ò–ß–ê–ô–ù–ò–ô –í–ò–í–Ü–î"
        elif message.text == 'üìå¬†–ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏–≤—ñ–¥':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—ñ–π –ø–æ—Ä—ñ–≥: {await sq.minimum_default_out()} –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—ñ–≥", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.minimum_default_out.set()    
# –ö–Ω–æ–ø–∫–∞ "–í–ò–í–Ü–î PREMIUM"
        elif message.text == 'üìå¬†–í–∏–≤—ñ–¥ PREMIUM':
            await message.answer(f"–¢–µ–ø–µ—Ä—ñ—à–Ω—ñ–π –ø–æ—Ä—ñ–≥: {await sq.minimum_prem_out()} –≥—Ä–Ω\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—ñ–≥", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.minimum_prem_out.set()

# ============================================ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ "–¶–Ü–ù–ê –°–ü–û–ù–°–û–†–ö–ò" =================================================
# –ö–Ω–æ–ø–∫–∞ "–ù–ê 3 –î–ù–Ü"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ –Ω–∞ 3 –¥–Ω—ñ':
            await message.answer(f"D\–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.days_3_price.set() 
# –ö–Ω–æ–ø–∫–∞ "–ù–ê 6 –î–ù–Ü–í"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ –Ω–∞ 6 –¥–Ω—ñ–≤':
            await message.answer(f"D\–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.days_6_price.set() 
# –ö–Ω–æ–ø–∫–∞ "–ù–ê 10 –î–ù–Ü–í"
        elif message.text == 'üìå¬†–¶—ñ–Ω–∞ –Ω–∞ 10 –¥–Ω—ñ–≤':
            await message.answer(f"D\–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É", reply_markup=admin_mkr.Out_in)
            await FSMAdmin.days_10_price.set()

# =============================================== –°–ò–°–¢–ï–ú–ù–ê –ß–ê–°–¢–ò–ù–ê ==========================================================
# === –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ ===
# –ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–æ–Ω—Å–æ–≤–∞–Ω–æ"
async def chanel_name(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        chanel_name = message.text
        admin_data['chanel_name'] = chanel_name
        if message.text == '–°–ø–æ–Ω—Å–æ–≤–∞–Ω–æ üëë':
            await message.answer(f"–î–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
            await message.answer(f"–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É", reply_markup=types.ReplyKeyboardRemove())
            await FSMAdmin.channel_id.set()
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ ‚ö†Ô∏è", reply_markup=types.ReplyKeyboardRemove())
# –î–æ–¥–∞—Ç–∏ ID –∫–∞–Ω–∞–ª—É —Å–ø–æ–Ω—Å–æ—Ä–∞
async def channel_id(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        channel_id = message.text
        admin_data['channel_id'] = channel_id
        if message.text[0] == '-':
            await message.answer(f"–î–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
            await message.answer(f"–í–≤–µ–¥—ñ—Ç—å —Å—Å–∏–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞", reply_markup=types.ReplyKeyboardRemove())
            await FSMAdmin.channel_url.set()
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID ‚ö†Ô∏è", reply_markup=types.ReplyKeyboardRemove())
# –î–æ–¥–∞—Ç–∏ —Å—Å–∏–ª–∫—É –Ω–∞ –∫–∞–Ω–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞
async def channel_url(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        channel_url = message.text
        admin_data['channel_url'] = channel_url
        if message.text[:8] == 'https://':
            await message.answer(f"–ù–∞–∑–Ω–∞—á—Ç–µ –ø–µ—Ä—ñ–æ–¥ –¥–Ω—ñ–≤:", reply_markup=admin_mkr.Sp_data_del)
            await FSMAdmin.date_channel.set()
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Å–∏–ª–∫–∞ ‚ö†Ô∏è", reply_markup=types.ReplyKeyboardRemove())
# –î–æ–¥–∞—Ç–∏ —Ç–µ—Ä–º—ñ–Ω —Å–ø–æ–Ω—Å–æ—Ä–∫–∏
async def date_channel(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        if message.text.isdigit():
            days = int(message.text)
            data_delete = datetime.date.today() + timedelta(days=days)
            await sq.aad_channel(data_delete, admin_data['chanel_name'], admin_data['channel_id'], admin_data['channel_url'])
            await message.answer(f"–°–ø–æ–Ω—Å–æ—Ä–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ ‚úÖ", reply_markup=admin_mkr.AdminMenu)
            await bot.send_message(admin_data['search_id'], f"–í–∞—à –∫–∞–Ω–∞–ª –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤ ‚úÖ")
            await FSMAdmin.admin.set()
        else:
            await message.answer(f"‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è")
# === –î–æ–¥–∞—Ç–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ ===
# –ü–æ—à—É–∫ –ø–æ ID
async def search_id(message: types.Message, state: FSMContext):
        async with state.proxy() as admin_data:
            search_id = int(message.text)
            admin_data['search_id'] = search_id
            if search_id == await sq.user_search_id(search_id):
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: @{await sq.give_username(search_id)}", reply_markup=admin_mkr.UpdateUsers)
                await FSMAdmin.search_id_next.set()
            else:
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π(")
# –î—ñ—ó –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É –ø–æ ID
async def search_id_in(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        if message.chat.type == 'private':
            if message.text == '–í–∏–¥–∞—Ç–∏ PREMIUM ‚≠êÔ∏è':
                Premiu_id = 'prem'
                users_id = admin_data['search_id']
                await sq.get_premium(Premiu_id, users_id)
                await message.answer(f"PREMIUM –≤–∏–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ ‚úÖ")
                await bot.send_message(users_id, f"PREMIUM –∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚úÖ\n–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è üôÇ")
                await FSMAdmin.admin.set()
            elif message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è üìö':
                user_id = admin_data['search_id']
                await message.answer(f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b> üìö:\n\nID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <b>{user_id}</b>\n–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: <b>{await sq.data_reg(user_id)}</b>\nUsername –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{await sq.username(user_id)}\n–ö–∞—Ä—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <b>{await sq.give_user_kart(user_id)}</b>\n–ü—Ä–µ–º—ñ—É–º –∞–∫–∞—É–Ω—Ç: {await sq.premium_user_ex(user_id)}\n–ó–∞–ø—Ä–æ—Å–∏–≤ –ª—é–¥–µ–π: <b>{await sq.count_referal(user_id)}</b>\n–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <b>{await sq.user_balance(user_id)}</b> –≥—Ä–Ω\n–í–∏–≤—ñ–≤ –≥—Ä–æ—à–µ–π: <b>{await sq.user_balance_out(user_id)}</b> –≥—Ä–Ω", parse_mode='HTML')
                await FSMAdmin.admin.set()
            elif message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ PREMIUM ‚ùå':
                users_id = admin_data['search_id']
                await sq.delete_PREMIUM(users_id)
                await message.answer(f"PREMIUM –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ ‚úÖ")
                await bot.send_message(users_id, f"PREMIUM –∞–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚ùå")
                await FSMAdmin.admin.set()
            elif message.text == '–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è':
                await message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                await FSMAdmin.send.set()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–±–µ–∫
async def callback_cmd_admin(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'out':
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await FSMAdmin.admin.set()
# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—É —Ü—ñ–Ω ====================
# –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ
async def default_price_ref(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_default_price_ref(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.default_price_ref()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ PREMIUM –∞–∫–∞—É–Ω—Ç—ñ
async def premium_price_ref(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_premium_price_ref(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.premium_price_ref()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ PREMIUM –∞–∫–∞—É–Ω—Ç—ñ
async def premium_ak_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_premium_ak_price(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.premium_ak_price()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ó–º—ñ–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –Ω–∞ —Å—Ç–æ–∫–æ–≤–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ
async def minimum_default_out(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_minimum_default_out(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.minimum_default_out()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ó–º—ñ–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –Ω–∞ PREMIUM –∞–∫–∞—É–Ω—Ç—ñ
async def minimum_prem_out(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_minimum_prem_out(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.minimum_prem_out()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –¶—ñ–Ω–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∫—É
# –ù–ê 3 –î–ù–Ü
async def days_3_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_sp_3days_price(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.sp_3days_price()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ù–ê 6 –î–ù–Ü–í
async def days_6_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_sp_6days_price(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.sp_6days_price()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# –ù–ê 10 –î–ù–Ü–í
async def days_10_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await sq.ed_sp_10days_price(message.text)
        await message.answer(f'–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {await sq.sp_10days_price()} –≥—Ä–Ω', reply_markup=admin_mkr.EditPrice)
        await FSMAdmin.admin.set()
    else:
        await message.answer('‚ö†Ô∏è –¶–µ –Ω–µ —á–∏—Å–ª–æ ‚ö†Ô∏è')
# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—É —Ü—ñ–Ω ====================
# –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def send_mess(message: types.Message, state: FSMContext):
    async with state.proxy() as admin_data:
        await bot.send_message(admin_data['search_id'], message.text)
        await message.answer('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=admin_mkr.UpdateUsers)
        await FSMAdmin.admin.set()

def register_handlers_admin(dp : Dispatcher):
    dp.register_message_handler(btn_admin, state=FSMAdmin.admin)
    dp.register_message_handler(search_id, state=FSMAdmin.search_id)
    dp.register_callback_query_handler(callback_cmd_admin, state=FSMAdmin.all_states)
    dp.register_message_handler(default_price_ref, state=FSMAdmin.ed_default_price_ref)
    dp.register_message_handler(premium_price_ref, state=FSMAdmin.ed_premium_price_ref)
    dp.register_message_handler(premium_ak_price, state=FSMAdmin.ed_premium_ak_price)
    dp.register_message_handler(minimum_default_out, state=FSMAdmin.minimum_default_out)
    dp.register_message_handler(minimum_prem_out, state=FSMAdmin.minimum_prem_out)
    dp.register_message_handler(days_3_price, state=FSMAdmin.days_3_price)
    dp.register_message_handler(days_6_price, state=FSMAdmin.days_6_price)
    dp.register_message_handler(days_10_price, state=FSMAdmin.days_10_price)
    dp.register_message_handler(search_id_in, state=FSMAdmin.search_id_next)
    dp.register_message_handler(chanel_name, state=FSMAdmin.chanel_name)
    dp.register_message_handler(channel_id, state=FSMAdmin.channel_id)
    dp.register_message_handler(channel_url, state=FSMAdmin.channel_url)
    dp.register_message_handler(date_channel, state=FSMAdmin.date_channel)
    dp.register_message_handler(send_mess, state=FSMAdmin.send)